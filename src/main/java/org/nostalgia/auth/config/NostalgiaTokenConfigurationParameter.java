package org.nostalgia.auth.config;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.nostalgia.auth.model.enums.NostalgiaConfigurationParameter;
import org.nostalgia.auth.util.NostalgiaKeyConverter;
import org.nostalgia.parameter.model.NostalgiaParameter;
import org.nostalgia.parameter.service.NostalgiaParameterService;
import org.springframework.context.annotation.Configuration;

import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Optional;
import java.util.Set;

/**
 * Configuration class for AYS token-related properties such as issuer, token expiration times and cryptographic keys.
 */
@Slf4j
@Getter
@Configuration
public class NostalgiaTokenConfigurationParameter {

    /**
     * The issuer value to be used in JWTs generated by the application.
     */
    private final String issuer;
    /**
     * The number of minutes until access tokens expire.
     */
    private final Integer accessTokenExpireMinute;
    /**
     * The number of days until refresh tokens expire.
     */
    private final Integer refreshTokenExpireDay;
    /**
     * The private key used for token signing and verification.
     */
    private final PrivateKey privateKey;
    /**
     * The public key used for token verification.
     */
    private final PublicKey publicKey;

    /**
     * Constructs a new NostalgiaTokenConfiguration instance using NostalgiaParameterService to retrieve relevant configuration parameters.
     *
     * @param parameterService the NostalgiaParameterService instance to use for parameter retrieval
     */
    public NostalgiaTokenConfigurationParameter(NostalgiaParameterService parameterService) {

        log.info("AYS Token Configuration is initializing with AYS Parameters...");

        final Set<NostalgiaParameter> configurationParameters = parameterService.findAll("AUTH_");

        this.issuer = NostalgiaConfigurationParameter.NOSTALGIA.getDefaultValue();

        this.accessTokenExpireMinute = Optional
                .ofNullable(NostalgiaParameter.getDefinition(NostalgiaConfigurationParameter.AUTH_ACCESS_TOKEN_EXPIRE_MINUTE, configurationParameters))
                .map(Integer::valueOf)
                .orElse(Integer.valueOf(NostalgiaConfigurationParameter.AUTH_ACCESS_TOKEN_EXPIRE_MINUTE.getDefaultValue()));

        this.refreshTokenExpireDay = Optional
                .ofNullable(NostalgiaParameter.getDefinition(NostalgiaConfigurationParameter.AUTH_REFRESH_TOKEN_EXPIRE_DAY, configurationParameters))
                .map(Integer::valueOf)
                .orElse(Integer.valueOf(NostalgiaConfigurationParameter.AUTH_REFRESH_TOKEN_EXPIRE_DAY.getDefaultValue()));

        final String encryptedPrivateKeyPem = Optional
                .ofNullable(NostalgiaParameter.getDefinition(NostalgiaConfigurationParameter.AUTH_TOKEN_PRIVATE_KEY, configurationParameters))
                .orElse(NostalgiaConfigurationParameter.AUTH_TOKEN_PRIVATE_KEY.getDefaultValue());
        this.privateKey = NostalgiaKeyConverter.convertPrivateKey(encryptedPrivateKeyPem);

        final String encryptedPublicKeyPem = Optional
                .ofNullable(NostalgiaParameter.getDefinition(NostalgiaConfigurationParameter.AUTH_TOKEN_PUBLIC_KEY, configurationParameters))
                .orElse(NostalgiaConfigurationParameter.AUTH_TOKEN_PUBLIC_KEY.getDefaultValue());
        this.publicKey = NostalgiaKeyConverter.convertPublicKey(encryptedPublicKeyPem);

        log.info("NOSTALGIA token configuration is initialized!");
    }

}
